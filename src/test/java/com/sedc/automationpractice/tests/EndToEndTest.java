package com.sedc.automationpractice.tests;

import com.sedc.automationpractice.units.EndToEndDataProvider;
import org.testng.annotations.Test;

public class EndToEndTest extends BaseTest {
    String[] pName = new String[5];
    String[] price = new String[5];
    String[] totalPrice = new String[5];
    String[] color = new String[5];
    String getState = "";

    @Test(description = "End to End test wire transfer", dataProvider = "Gender (0 = Mr, 1 = Mrs), Name, LastName, Password, DateOfBirth (dd,mm,yyyy), address, City, State (int), Zip, Number, Quantity, Size", dataProviderClass = EndToEndDataProvider.class)
    public void wireTransfer(int gender, String name, String lastName, String password, int day, int month, int year, String address, String city, int state, String zip, String num, String quantity, String size) {
        homePage.navigateToPage();
        homePage.navigateToSignIn();
        signInPage.createAddEmail(createUserPage.randomEmail());
        signInPage.createButton();
        createUserPage.selectGender(gender);
        createUserPage.enterName(name);
        createUserPage.lastName(lastName);
        createUserPage.password(password);
        createUserPage.selectDay(day);
        createUserPage.selectMonth(month);
        createUserPage.selectYear(year);
        createUserPage.enterAddress(address);
        createUserPage.enterCity(city);
        createUserPage.selectState(state);
        getState = createUserPage.getState(state);
        createUserPage.enterZip(zip);
        createUserPage.enterNumber(num);
        createUserPage.setSubmit();
        homePage.selectWomen();
        scrollDown(500);
        pName[0] = categoriesPage.getProductName(1);
        price[0] = categoriesPage.getProductPrice(1);
        quickViewPage.qckViewProduct(1);
        quickViewPage.switchQckView();
        quickViewPage.qckViewQuantity(quantity);
        quickViewPage.qckViewSize(size);
        viewProductPage.color(1);
        quickViewPage.qckViewAddToCart();
        color[0] = categoriesPage.productColor();
        categoriesPage.continueShopping();
        pName[1] = categoriesPage.getProductName(0);
        price[1] = categoriesPage.getProductPrice(0);
        quickViewPage.qckViewProduct(0);
        quickViewPage.switchQckView();
        quickViewPage.qckViewQuantity(quantity);
        quickViewPage.qckViewSize(size);
        viewProductPage.color(0);
        quickViewPage.qckViewAddToCart();
        color[1] = categoriesPage.productColor();
        categoriesPage.continueShopping();
        pName[2] = categoriesPage.getProductName(3);
        price[2] = categoriesPage.getProductPrice(3);
        scrollDown(500);
        categoriesPage.viewProduct(3);
        viewProductPage.productQuantity("10");
        viewProductPage.size(size);
        viewProductPage.color(1);
        viewProductPage.addToCart();
        color[2] = categoriesPage.productColor();
        categoriesPage.proceedCheckOut();
        softAssert.assertEquals(checkOutSummaryPage.checkNumberOfCartItems(), 3, "Total products in cart is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productName(0), pName[0], "Not the correct product");
        softAssert.assertEquals(checkOutSummaryPage.productName(1), pName[1], "Not the correct product");
        softAssert.assertEquals(checkOutSummaryPage.productName(2), pName[2], "Not the correct product");
        softAssert.assertEquals(checkOutSummaryPage.productColor(0), color[0], "Color of product is different");
        softAssert.assertEquals(checkOutSummaryPage.productColor(1), color[1], "Color of product is different");
        softAssert.assertEquals(checkOutSummaryPage.productColor(2), color[2], "Color of product is different");
        softAssert.assertEquals(checkOutSummaryPage.productSize(0), size, "Size of products is different");
        softAssert.assertEquals(checkOutSummaryPage.productQuant(0), quantity, "Quantity of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productQuant(1), quantity, "Quantity of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productQuant(2), "10", "Quantity of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productPrice(0), price[0], "Price of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productPrice(1), price[1], "Price of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productPrice(2), price[2], "Price of this product is not correct");
        totalPrice[0] = checkOutSummaryPage.totalProdPriceCal(price[0], quantity);
        totalPrice[1] = checkOutSummaryPage.totalProdPriceCal(price[1], quantity);
        totalPrice[2] = checkOutSummaryPage.totalProdPriceCal(price[2], "10");
        softAssert.assertEquals(checkOutSummaryPage.productTotalPrice(0), totalPrice[0], "Total price of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productTotalPrice(1), totalPrice[1], "Total price of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productTotalPrice(2), totalPrice[2], "Total price of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.totalPrice(), checkOutSummaryPage.totalPriceCal(totalPrice), "Total price of all products is not the same");
        softAssert.assertEquals(checkOutSummaryPage.delName(), name, "Delivery name is not correct");
        softAssert.assertEquals(checkOutSummaryPage.delLastName(), lastName, "Delivery last name is not correct");
        softAssert.assertEquals(checkOutSummaryPage.delAd(), address, "Delivery address is not correct");
        softAssert.assertEquals(checkOutSummaryPage.deliveryCityStateZip(), city + ", " + getState + " " + zip, "Delivery City State and ZIP are not correct");
        softAssert.assertEquals(checkOutSummaryPage.delNum(), num, "Delivery number is not correct");
        softAssert.assertEquals(checkOutSummaryPage.invName(), name, "Invoice name is not correct");
        softAssert.assertEquals(checkOutSummaryPage.invLastName(), lastName, "Invoice last name is not correct");
        softAssert.assertEquals(checkOutSummaryPage.invAd(), address, "Invoice address is not correct");
        softAssert.assertEquals(checkOutSummaryPage.invoiceCityStateZip(), city + ", " + getState + " " + zip, "Invoice City State and ZIP are not correct");
        softAssert.assertEquals(checkOutSummaryPage.invNum(), num, "Invoice number is not correct");
        checkOutSummaryPage.deleteProduct(2);
        sleep(5000);
        softAssert.assertEquals(checkOutSummaryPage.checkNumberOfCartItems(), 2, "Number of items is not correct after deletion");
        checkOutSummaryPage.proceed();
        softAssert.assertEquals(checkOutAddressPage.delName(), name, "Delivery name is not correct");
        softAssert.assertEquals(checkOutAddressPage.delLastName(), lastName, "Delivery last name is not correct");
        softAssert.assertEquals(checkOutAddressPage.delAd(), address, "Delivery address is not correct");
        softAssert.assertEquals(checkOutAddressPage.deliveryCityStateZip(), city + ", " + getState + " " + zip, "Delivery City State and ZIP are not correct");
        softAssert.assertEquals(checkOutAddressPage.delNum(), num, "Delivery number is not correct");
        softAssert.assertEquals(checkOutAddressPage.invName(), name, "Invoice name is not correct");
        softAssert.assertEquals(checkOutAddressPage.invLastName(), lastName, "Invoice last name is not correct");
        softAssert.assertEquals(checkOutAddressPage.invAd(), address, "Invoice address is not correct");
        softAssert.assertEquals(checkOutAddressPage.invoiceCityStateZip(), city + ", " + getState + " " + zip, "Invoice City State and ZIP are not correct");
        softAssert.assertEquals(checkOutAddressPage.invNum(), num, "Invoice number is not correct");
        checkOutAddressPage.proceed();
        checkOutAddressPage.proceed();
        softAssert.assertTrue(checkOutShippingPage.checkError(), "Error message is not displayed");
        checkOutShippingPage.errorClose();
        checkOutShippingPage.terms();
        softAssert.assertTrue(checkOutShippingPage.checkTerms(), "Terms are not checked");
        checkOutAddressPage.proceed();
        checkOutPaymentPage.wire();
        softAssert.assertEquals(checkOutPaymentPage.checkPayment(), "BANK-WIRE PAYMENT.", "Bank-wire is not chosen");
        checkOutAddressPage.proceed();
        softAssert.assertEquals(checkOutPaymentPage.checkOrderBank(), "Your order on My Store is complete.", "Order not processed");
        softAssert.assertAll();
    }

    @Test(description = "End to End test check payment", dataProvider = "Gender (0 = Mr, 1 = Mrs), Name, LastName, Password, DateOfBirth (dd,mm,yyyy), address, City, State (int), Zip, Number, Quantity, Size", dataProviderClass = EndToEndDataProvider.class)
    public void checkPayment(int gender, String name, String lastName, String password, int day, int month, int year, String address, String city, int state, String zip, String num, String quantity, String size) {
        homePage.navigateToPage();
        homePage.navigateToSignIn();
        signInPage.createAddEmail(createUserPage.randomEmail());
        signInPage.createButton();
        createUserPage.selectGender(gender);
        createUserPage.enterName(name);
        createUserPage.lastName(lastName);
        createUserPage.password(password);
        createUserPage.selectDay(day);
        createUserPage.selectMonth(month);
        createUserPage.selectYear(year);
        createUserPage.enterAddress(address);
        createUserPage.enterCity(city);
        createUserPage.selectState(state);
        getState = createUserPage.getState(state);
        createUserPage.enterZip(zip);
        createUserPage.enterNumber(num);
        createUserPage.setSubmit();
        homePage.selectWomen();
        scrollDown(500);
        pName[0] = categoriesPage.getProductName(1);
        price[0] = categoriesPage.getProductPrice(1);
        quickViewPage.qckViewProduct(1);
        quickViewPage.switchQckView();
        quickViewPage.qckViewQuantity(quantity);
        quickViewPage.qckViewSize(size);
        viewProductPage.color(1);
        quickViewPage.qckViewAddToCart();
        color[0] = categoriesPage.productColor();
        categoriesPage.continueShopping();
        pName[1] = categoriesPage.getProductName(0);
        price[1] = categoriesPage.getProductPrice(0);
        quickViewPage.qckViewProduct(0);
        quickViewPage.switchQckView();
        quickViewPage.qckViewQuantity(quantity);
        quickViewPage.qckViewSize(size);
        viewProductPage.color(0);
        quickViewPage.qckViewAddToCart();
        color[1] = categoriesPage.productColor();
        categoriesPage.continueShopping();
        pName[2] = categoriesPage.getProductName(4);
        price[2] = categoriesPage.getProductPrice(4);
        scrollDown(500);
        categoriesPage.viewProduct(4);
        viewProductPage.productQuantity("10");
        viewProductPage.size(size);
        viewProductPage.color(1);
        viewProductPage.addToCart();
        color[2] = categoriesPage.productColor();
        categoriesPage.proceedCheckOut();
        softAssert.assertEquals(checkOutSummaryPage.checkNumberOfCartItems(), 3, "Total products in cart is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productName(0), pName[0], "Not the correct product");
        softAssert.assertEquals(checkOutSummaryPage.productName(1), pName[1], "Not the correct product");
        softAssert.assertEquals(checkOutSummaryPage.productName(2), pName[2], "Not the correct product");
        softAssert.assertEquals(checkOutSummaryPage.productColor(0), color[0], "Color of product is different");
        softAssert.assertEquals(checkOutSummaryPage.productColor(1), color[1], "Color of product is different");
        softAssert.assertEquals(checkOutSummaryPage.productColor(2), color[2], "Color of product is different");
        softAssert.assertEquals(checkOutSummaryPage.productQuant(0), quantity, "Quantity of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productQuant(1), quantity, "Quantity of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productQuant(2), "10", "Quantity of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productPrice(0), price[0], "Price of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productPrice(1), price[1], "Price of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productPrice(2), price[2], "Price of this product is not correct");
        totalPrice[0] = checkOutSummaryPage.totalProdPriceCal(price[0], quantity);
        totalPrice[1] = checkOutSummaryPage.totalProdPriceCal(price[1], quantity);
        totalPrice[2] = checkOutSummaryPage.totalProdPriceCal(price[2], "10");
        softAssert.assertEquals(checkOutSummaryPage.productTotalPrice(0), totalPrice[0], "Total price of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productTotalPrice(1), totalPrice[1], "Total price of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.productTotalPrice(2), totalPrice[2], "Total price of this product is not correct");
        softAssert.assertEquals(checkOutSummaryPage.totalPrice(), checkOutSummaryPage.totalPriceCal(totalPrice), "Total price of all products is not the same");
        softAssert.assertEquals(checkOutSummaryPage.delName(), name, "Delivery name is not correct");
        softAssert.assertEquals(checkOutSummaryPage.delLastName(), lastName, "Delivery last name is not correct");
        softAssert.assertEquals(checkOutSummaryPage.delAd(), address, "Delivery address is not correct");
        softAssert.assertEquals(checkOutSummaryPage.deliveryCityStateZip(), city + ", " + getState + " " + zip, "Delivery City State and ZIP are not correct");
        softAssert.assertEquals(checkOutSummaryPage.delNum(), num, "Delivery number is not correct");
        softAssert.assertEquals(checkOutSummaryPage.invName(), name, "Invoice name is not correct");
        softAssert.assertEquals(checkOutSummaryPage.invLastName(), lastName, "Invoice last name is not correct");
        softAssert.assertEquals(checkOutSummaryPage.invAd(), address, "Invoice address is not correct");
        softAssert.assertEquals(checkOutSummaryPage.invoiceCityStateZip(), city + ", " + getState + " " + zip, "Invoice City State and ZIP are not correct");
        softAssert.assertEquals(checkOutSummaryPage.invNum(), num, "Invoice number is not correct");
        checkOutSummaryPage.deleteProduct(2);
        sleep(5000);
        softAssert.assertEquals(checkOutSummaryPage.checkNumberOfCartItems(), 2, "Number of items is not correct after deletion");
        checkOutSummaryPage.proceed();
        softAssert.assertEquals(checkOutAddressPage.delName(), name, "Delivery name is not correct");
        softAssert.assertEquals(checkOutAddressPage.delLastName(), lastName, "Delivery last name is not correct");
        softAssert.assertEquals(checkOutAddressPage.delAd(), address, "Delivery address is not correct");
        softAssert.assertEquals(checkOutAddressPage.deliveryCityStateZip(), city + ", " + getState + " " + zip, "Delivery City State and ZIP are not correct");
        softAssert.assertEquals(checkOutAddressPage.delNum(), num, "Delivery number is not correct");
        softAssert.assertEquals(checkOutAddressPage.invName(), name, "Invoice name is not correct");
        softAssert.assertEquals(checkOutAddressPage.invLastName(), lastName, "Invoice last name is not correct");
        softAssert.assertEquals(checkOutAddressPage.invAd(), address, "Invoice address is not correct");
        softAssert.assertEquals(checkOutAddressPage.invoiceCityStateZip(), city + ", " + getState + " " + zip, "Invoice City State and ZIP are not correct");
        softAssert.assertEquals(checkOutAddressPage.invNum(), num, "Invoice number is not correct");
        checkOutAddressPage.proceed();
        checkOutAddressPage.proceed();
        softAssert.assertTrue(checkOutShippingPage.checkError(), "Error message is not displayed");
        checkOutShippingPage.errorClose();
        checkOutShippingPage.terms();
        softAssert.assertTrue(checkOutShippingPage.checkTerms(), "Terms are not checked");
        checkOutAddressPage.proceed();
        checkOutPaymentPage.check();
        softAssert.assertEquals(checkOutPaymentPage.checkPayment(), "CHECK PAYMENT", "Check payment is not chosen");
        checkOutAddressPage.proceed();
        softAssert.assertEquals(checkOutPaymentPage.checkOrderCheck(), "Your order on My Store is complete.", "Order not processed");
        softAssert.assertAll();
    }


}
